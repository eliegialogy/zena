default:
  context:
    lang: 'en'
    visitor: 'ant'
    node: 'cleanWater'
  src: "simple text"
  tem: "simple text"
  res: "simple text"

# ============= query_parse_param ========
empty:
  tem: "<%= query_parse('para' => %{}) %>"
  res: "1=1"

empty_quotes:
  tem: "<%= query_parse('para' => %{\"\"}) %>"
  res: "para = \"\""

empty_single_quotes:
  tem: "<%= query_parse('para' => %{''}) %>"
  res: "para = ''"

null_quoted:
  tem: "<%= query_parse('para' => %{\"null\"}) %>"
  res: "para = \"null\""

is_null:
  tem: "<%= query_parse('para' => %{null}) %>"
  res: "para is null"

is_not_null:
  tem: "<%= query_parse('para' => %{!null}) %>"
  res: "not (para is null)"

literal:
  tem: "<%= query_parse('para' => %{hello}) %>"
  res: "para = \"hello\""

literal_date:
  tem: "<%= query_parse('para' => %{2.12.1983}) %>"
  res: "para = '1983-12-02'"

number:
  tem: "<%= query_parse('para' => %{45}) %>"
  res: "para = 45"

not_number:
  tem: "<%= query_parse('para' => %{!45}) %>"
  res: "not (para = 45)"

greater_then:
  tem: "<%= query_parse('para' => %{>32}) %>"
  res: "para >32"

greater_then_date:
  context:
    lang: fr
  tem: "<%= query_parse('para' => %{>7.5.1965}) %>"
  res: "para >'1965-05-07'"

greater_or_equal_then:
  tem: "<%= query_parse('para' => %{>=32}) %>"
  res: "para >=32"

smaller_then:
  tem: "<%= query_parse('para' => %{< 32}) %>"
  res: "para < 32"

smaller_or_equal_then:
  tem: "<%= query_parse('para' => %{<=32}) %>"
  res: "para <=32"

equal:
  tem: "<%= query_parse('para' => %{=32+3}) %>"
  res: "para =32+3"

not_equal:
  tem: "<%= query_parse('para' => %{!=32}) %>"
  res: "not (para =32)"

interval:
  tem: "<%= query_parse('para' => %{10..20}) %>"
  res: "para >= 10 and para <= 20"

interval_date:
  context:
    lang: fr
  tem: "<%= query_parse('para' => %{1.1.2010..31.12.2010}) %>"
  res: "para >= '2010-01-01' and para <= '2010-12-31'"

not_interval_date:
  context:
    lang: fr
  tem: "<%= query_parse('para' => %{!1.1.2010..31.12.2010}) %>"
  res: "not (para >= '2010-01-01' and para <= '2010-12-31')"

interval_date_en:
  context:
    lang: en
  tem: "<%= query_parse('para' => %{2010/1/1..2010/12/31}) %>"
  res: "para >= '2010-01-01' and para <= '2010-12-31'"

like:
  tem: "<%= query_parse('para' => %{*bar}) %>"
  res: "para like \"%bar\""

like_at_end:
  tem: "<%= query_parse('para' => %{bar*}) %>"
  res: "para like \"bar%\""

literal_with_star:
  tem: "<%= query_parse('para' => %{'*bar'}) %>"
  res: "para = '*bar'"

many_params:
  tem: "<%= query_parse('anti' => %{'*bar'}, 'gone' => %{> 13}) %>"
  res: "/anti = '\*bar' and gone > 13|gone > 13 and anti = '\*bar'/"

rubyless_query_parse:
  context:
    p:
      id: '> 45'
      name: 'foo'
  src: "<r:eval>query_parse(params[:p])</r:eval>"
  res: "/id > 45 and name = \"foo\"|name = \"foo\" and id > 45/"

paginate_list:
  src: "<r:pages in='site' limit='10' paginate='p' do='link' page='list'/>"
  # should define page_name
  res: "1 <a href='/oo/projects-list/Clean-Water-project?p=2'>2</a>"

paginate_count:
  src: "<r:pages in='site' paginate='p' do='count'/>"
  # should properly pass the query to sub-contexts.
  tem: '/<%= _znodes %>/'
  res: "18"

count:
  src: "<r:pages in='site' do='count'/>"
  # should detect 'count' method and count nodes without pagination.
  tem: '/<%= _znodes %>/'
  res: "18"

paginate_page_name:
  context:
    p: 5
  src: "<r:pages in='site' limit='3' paginate='p' do='link' page='list' page_count='4' do='each'><r:page_name/>(<r:this/>)</r:pages>"
  # should define page_name
  res: "â€¦(3) 4(4) 5 6(6)"
# ============= Dynamic query ========

query:
  # Live compile and query from params
  context:
    visitor: lion
    node: cleanWater
    qb: "nodes where updated_at.year = 2007 in project"
  src: "<r:query default='nodes in project' do='each' join=', ' do='title'/>"
  tem: "/if var1 = query\('Node', \"@node\", params\[:qb\] \|\| \"nodes in project\"\)/"
  res: 'crocodiles'

query_with_default:
  # Live compile and query from params
  context:
    visitor: lion
    node: cleanWater
  src: "<r:query default='nodes in project' do='each' join=', ' do='title'/>"
  res: "crocodiles, it's a lake, Keeping things clean !, The lake we love, Nice Bananas, parc opening, status title, water"

query_with_param:
  # Live compile and query from params
  context:
    visitor: lion
    node: cleanWater
    qb: "nodes where updated_at.year = #{params[:p]} in project"
    p: 2007
  src: "<r:query default='nodes in project' do='each' join=', ' do='title'/>"
  res: 'crocodiles'

query_eval:
  # Live compile and query from params
  context:
    visitor: lion
    node: cleanWater
    scope: 'self'
  src: "<r:query select='pages in #{params[:scope] || \"project\"}' default='pages in project' do='each' join=', ' do='title'/>"
  res: 'crocodiles, Keeping things clean !, Nice Bananas, status title'

query_with_parse:
  context:
    filter:
      title: 'status title'
  src: "<r:query default='pages in site' select='pages where #{query_parse(params[:filter])} in site' do='each' join=', ' do='title'/>"
  tem: '/query.*pages where #\{query_parse\(params\[:filter\]\)\} in site\"\)/'
  res: 'status title'

query_with_parse_paginate:
  src: "<r:query default='pages in site limit 4 paginate p' select='pages where #{query_parse(params[:q])} in site limit 2 paginate p' do='link' page='list'/>"
  # should properly pass the query to sub-contexts.
  tem: '/page_numbers/'
  res: "/1.*2.*3.*4.*5/"

query_can_be_nil_bad_argument_type:
  context:
    filter:
      title: 'status title'
  src: "<r:query default='pages in site' eval='params[:filter]' do='each' join=', ' do='title'/>"
  tem: '/params\[:filter\] \|\| \"pages in site\"/'
  res: ''

query_truc:
  tem: '<%= query("Page", "@node", "pages in site", :type => :count) %>'
  res: '18'
