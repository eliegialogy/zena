default:
  context:
    node_name: '@node'
    node: 'cleanWater'
    visitor: 'ant'
  src: ""
  sql: "[%Q{SELECT nodes.* FROM nodes WHERE #{secure_scope('nodes')} AND nodes.parent_id = ? ORDER BY nodes.zip ASC}, @node.id]"

nodes_from_nodes_in_section:
  sql: "[%Q{SELECT nodes.* FROM nodes JOIN nodes AS no1 WHERE #{secure_scope('nodes')} AND nodes.parent_id = no1.id AND no1.section_id = ? GROUP BY nodes.id ORDER BY nodes.zip ASC}, @node.get_section_id]"

bad_relation:
  src: "categories in site"
  sql: Unknown relation 'categories'.

overriden_relation:
  src: 'references'
  sql: "[%Q{SELECT nodes.*,links.id AS `link_id`,links.status AS `l_status`,links.comment AS `l_comment`,links.date AS `l_date` FROM links JOIN nodes WHERE #{secure_scope('nodes')} AND nodes.id = links.target_id AND links.relation_id = _ID(node_has_references) AND links.source_id = ? ORDER BY nodes.zip ASC}, @node.id]"

link_selects_in_sub_query:
  src: "icons or images"
  sql: "[%Q{SELECT nodes.*,links.id AS `link_id`,links.status AS `l_status`,links.comment AS `l_comment`,links.date AS `l_date` FROM links JOIN nodes WHERE #{secure_scope('nodes')} AND ((nodes.id = links.target_id AND links.relation_id = _ID(node_has_an_icon) AND links.source_id = ?) OR (nodes.kpath LIKE 'NDI%' AND nodes.parent_id = ? AND links.id = 0)) GROUP BY nodes.id ORDER BY nodes.zip ASC}, @node.id, @node.id]"

project:
  sql: "[%Q{SELECT nodes.* FROM nodes WHERE #{secure_scope('nodes')} AND nodes.id = ? ORDER BY nodes.zip ASC}, @node.get_project_id]"

projects_from_tags:
  sql: "/nodes.id = no1.project_id AND no1.kpath LIKE 'NPT%' AND no1.parent_id = ?/"

projects_in_site:
  sql: "%Q{SELECT nodes.* FROM nodes WHERE #{secure_scope('nodes')} AND nodes.kpath LIKE 'NPP%' ORDER BY nodes.zip ASC}"

nodes_in_section:
  context:
    node: 'people'
  sql: "[%Q{SELECT nodes.* FROM nodes WHERE #{secure_scope('nodes')} AND nodes.section_id = ? ORDER BY nodes.zip ASC}, @node.get_section_id]"
  res: "Solenopsis Invicta, Panthera Tigris Sumatran, Panthera Leo Verneyi, My Life, Mr nobody"

relation_from_class:
  src: "hot from projects in site"
  sql: "/links.source_id = no1.id AND no1.kpath LIKE 'NPP%'/"

same_name_as_class:
  # Creates pages relation in QueryNodeTest
  src: 'pages from letters'
  sql: "/nodes.id = links.source_id AND links.relation_id.*no1.kpath LIKE 'NNL%'/"

same_name_as_class_in_site:
  # Creates pages relation in QueryNodeTest
  src: 'pages in site'
  sql: "%Q{SELECT nodes.* FROM nodes WHERE #{secure_scope('nodes')} AND nodes.kpath LIKE 'NP%' ORDER BY nodes.zip ASC}"

same_name_as_class_not_valid:
  # Creates pages relation in QueryNodeTest
  src: 'pages'
  sql: "[%Q{SELECT nodes.* FROM nodes WHERE #{secure_scope('nodes')} AND nodes.kpath LIKE 'NP%' AND nodes.parent_id = ? ORDER BY nodes.zip ASC}, @node.id]"

root_should_be_project:
  context:
    # Make sure we do not start query on a Project so that we can tell if 'root' properly sets main_class.
    node: ant
  src: 'news from root'
  sql: "%Q{SELECT nodes.*,links.id AS `link_id`,links.status AS `l_status`,links.comment AS `l_comment`,links.date AS `l_date` FROM links JOIN nodes JOIN nodes AS no1 WHERE #{secure_scope('nodes')} AND nodes.id = links.source_id AND links.relation_id = 488905946 AND links.target_id = no1.id AND no1.id = 850927283 GROUP BY nodes.id ORDER BY nodes.zip ASC}"

start_as_tag:
  context:
    node: art
  src: "tagged from tag:start"
  sql: '/no1.site_id = \? AND no1.zip = \?.*current_site.id, start_node_zip/'
  res: 'Clean Water project, super ouverture'

from_visitor:
  src: 'favorites from visitor'
  sql: '/visitor.node_id/'
  res: 'Nature'

# l_date_as_date:
#   src: "select *,if(l_date,l_date,event_at) AS date from (notes or assigned_notes) order by date"

project_as_blog:
  # Should scope by path
  # This is the same as "project where class like Blog"
  src: "Blog:project"
  sql: "[%Q{SELECT nodes.* FROM nodes WHERE #{secure_scope('nodes')} AND nodes.kpath LIKE 'NPPB%' AND nodes.id = ? ORDER BY nodes.zip ASC}, @node.get_project_id]"

from_root:
  context:
    site: alias
  src: nodes from root limit 3
  res: 'people, projects list, Collections'
  
from_home:
  context:
    site: alias
  src: nodes from home limit 3
  res: 'bird, flower'

# openging in art(33) and news(34)
having_on_relation_count:
  context:
    params:
      ids: '33,34'
  src: 'tagged from tag select id.count as t_count where id in (#{params[:ids].split(",")}) in site having t_count = #{params[:ids].split(",").size}'
  res: 'super ouverture'